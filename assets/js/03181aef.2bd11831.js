"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[876],{3124:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var r=t(5893),s=t(1151);const i={},o=void 0,l={type:"mdx",permalink:"/dina-docusaurus/my-markdown-page",source:"@site/src/pages/my-markdown-page.md",description:"AWS EKS (using the eksctl tool)",frontMatter:{},unlisted:!1},c={},a=[{value:"AWS EKS (using the eksctl tool)",id:"aws-eks-using-the-eksctl-tool",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Create Cluster",id:"create-cluster",level:3}];function u(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"aws-eks-using-the-eksctl-tool",children:"AWS EKS (using the eksctl tool)"}),"\n",(0,r.jsxs)(n.p,{children:["This page provides instructions on how to manually create an EKS cluster using the ",(0,r.jsx)(n.code,{children:"eksctl"})," tool with the minimum requirements to run the Agility application in High Availability mode."]}),"\n",(0,r.jsx)(n.p,{children:"To properly run the application, the cluster must include the following:"}),"\n",(0,r.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"eksctl"}),"\n",(0,r.jsx)(n.li,{children:"helm"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"create-cluster",children:"Create Cluster"}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"To create a cluster:"}),(0,r.jsx)(n.p,{children:"1- Run the following to generate the cluster definition (adjust the zone if needed)"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'export CLUSTER_NAME="demo-cluster"\r\nexport AWS_REGION="us-west-2"\r\n\r\nexport ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account)\r\n\r\ncat <<EOF | tee ${CLUSTER_NAME}.yaml\r\n---\r\napiVersion: eksctl.io/v1alpha5\r\nkind: ClusterConfig\r\n\r\nmetadata:\r\n  name: ${CLUSTER_NAME}\r\n  region: us-west-2\r\n  version: "1.24"\r\n\r\navailabilityZones: ["us-west-2a", "us-west-2b", "us-west-2c"]\r\n\r\nmanagedNodeGroups:\r\n- name: nodegroup\r\n  minSize: 4\r\n  maxSize: 6\r\n  desiredCapacity: 4\r\n  instanceType: t3.2xlarge\r\n  ssh:\r\n    enableSsm: true\r\n\r\n# To enable all of the control plane logs, uncomment below:\r\n# cloudWatch:\r\n#  clusterLogging:\r\n#    enableTypes: ["*"]\r\nEOF\n'})}),(0,r.jsx)(n.p,{children:"2- Execute eksctl"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"eksctl create cluster -f ${CLUSTER_NAME}.yaml\n"})}),(0,r.jsx)(n.p,{children:"Wait ~10 mins to have the cluster ready."})]})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>o});var r=t(7294);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);